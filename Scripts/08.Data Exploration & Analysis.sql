/*
===============================================================================
Data Exploration 
===============================================================================
Purpose:
    This script demonstrates data manipulation and analysis techniques used 
    to query and  explore cleaned tables
===============================================================================
*/
-- Retrieve list of all exixting SalesChannel
SELECT DISTINCT   SalesChannel    FROM cleaned.Orders;


-- Retrieve list of all exixting WarehouseCode
SELECT DISTINCT   WarehouseCode    FROM cleaned.Orders;


-- Retrieve list of all exixting Region
SELECT DISTINCT  Region    
FROM (
    SELECT Region FROM cleaned.StoreLocation
    UNION ALL
    SELECT  Region    FROM cleaned.SalesTeam) AllRegions



-- Retrieve list of all exixting TimeZone
SELECT DISTINCT   TimeZone    FROM cleaned.StoreLocation;


-- Determine the first and last order date and the total duration in months
SELECT 
    MIN(orderDate) AS firstOrderDate,
    MAX(orderDate) AS lastOrder_Date,
    DATEDIFF(MONTH, MIN(orderDate), MAX(orderDate)) AS orderRangeMonths
FROM cleaned.Orders;


-- Find the Total Sales
SELECT ROUND(SUM(Sales),2) AS TotalSales FROM cleaned.Orders


-- Find how many items are sold
SELECT SUM(OrderQuantity) AS totalQuantity FROM cleaned.Orders

-- Find the Total profit
SELECT ROUND(SUM(Profit),2) AS totalProfits FROM cleaned.Orders

-- Find the average selling price
SELECT ROUND(AVG(UnitPrice), 2) AS AvgPrice FROM cleaned.Orders

-- Find the Total number of Orders
SELECT COUNT(OrderID) AS TotalOrders FROM cleaned.Orders

-- Find the total number of products
SELECT COUNT(ProductID) AS totalProducts FROM cleaned.Products

-- Find the total number of customers
SELECT COUNT(CustomerID) AS totalCustomers FROM cleaned.Customers;

-- Find the total number of customers that has placed an order
SELECT COUNT(DISTINCT CustomerID) AS TotalCustomers FROM cleaned.Orders;




-- ===============================================================
-- Generate a Report that shows all key metrics of the business
-- ===============================================================
SELECT 'Total Sales' AS 'Measure Name', ROUND(SUM(Sales),0) AS 'Measure Value' FROM cleaned.Orders
UNION ALL
SELECT 'Total Quantity', SUM(OrderQuantity) FROM cleaned.Orders
UNION ALL
SELECT 'Total Profit', ROUND(SUM(Profit),0) FROM cleaned.Orders
UNION ALL
SELECT 'Average Price', ROUND(AVG(UnitPrice),0) FROM cleaned.Orders
UNION ALL
SELECT 'Total Orders', COUNT(DISTINCT OrderID) FROM cleaned.Orders
UNION ALL
SELECT 'Total Products', COUNT(DISTINCT ProductID) FROM cleaned.Orders
UNION ALL
SELECT 'Total Customers', COUNT(CustomerID) FROM cleaned.Orders;




-- ===============================================================
-- What is the total profit and revenue generated by each customer?
-- ===============================================================
SELECT
    c.CustomerID,
    c.CustomerName,
    SUM(o.Profit) AS TotalProfit,
    SUM(o.Sales) AS TotalRevenue
FROM cleaned.Orders o
LEFT JOIN cleaned.Customers c
    ON c.CustomerID = o.customerID
GROUP BY 
    c.CustomerID,
    c.CustomerName
ORDER BY totalProfit DESC;



-- ===============================================================
-- What is the total profit and revenue generated by each SalesTeam?
-- ===============================================================
SELECT
    s.SalesTeamID,
    s.SalesTeamName,
    SUM(o.Profit) AS TotalProfit,
    SUM(o.Sales) AS TotalRevenue
FROM cleaned.Orders o
LEFT JOIN cleaned.SalesTeam s
    ON s.SalesTeamID = o.SalesTeamID
GROUP BY 
    s.SalesTeamID,
    s.SalesTeamName
ORDER BY TotalProfit DESC;




-- ===============================================================
-- What is the distribution of sold items across Region?
-- ===============================================================
SELECT
    sl.Region,
    SUM(o.OrderQuantity) AS TotalSoldItems,
    ROUND(SUM(o.Profit),0) AS TotalProfit
FROM cleaned.Orders o
LEFT JOIN cleaned.StoreLocation sl
    ON o.StoreID = sl.StoreID
GROUP BY sl.Region
ORDER BY TotalSoldItems DESC;




-- ===============================================================
-- Which 5 products Generating the Highest Profit?
-- ===============================================================
SELECT TOP 5
    p.ProductName,
    SUM(o.Profit) AS TotalProfit
FROM cleaned.Orders o
LEFT JOIN cleaned.Products p
    ON p.ProductID = o.ProductID
GROUP BY p.ProductName
ORDER BY TotalProfit DESC;




-- ===============================================================
-- What are the 5 worst-performing products?
-- ===============================================================
SELECT TOP 5
    p.ProductName,
    SUM(o.Profit) AS TotalProfit
FROM cleaned.Orders o
LEFT JOIN cleaned.Products p
    ON p.ProductID = o.ProductID
GROUP BY p.ProductName
ORDER BY TotalProfit;




-- ===============================================================
-- Find the top 10 customers who have generated the highest Profit
-- ===============================================================
SELECT TOP 10
    c.CustomerID,
    c.CustomerName,
    SUM(o.Profit) AS TotalProfit
FROM cleaned.Orders o
LEFT JOIN cleaned.Customers c
    ON c.CustomerID = o.CustomerID
GROUP BY c.CustomerID, c.CustomerName
ORDER BY TotalProfit DESC;




-- ===============================================================
-- The 3 customers with the fewest orders placed
-- ===============================================================
SELECT TOP 3
    c.CustomerID,
    c.CustomerName,
    COUNT(DISTINCT orderID) AS totalOrders
FROM cleaned.Orders o
LEFT JOIN cleaned.Customers c
    ON c.CustomerID = o.CustomerID
GROUP BY c.CustomerID, c.CustomerName
ORDER BY totalOrders ;




-- ===============================================================
-- Find the top 5 Salesteam who have generated the highest Profit
-- ===============================================================
SELECT TOP 5
    st.SalesTeamID,
    st.SalesTeamName,
    SUM(o.Profit) AS TotalProfit
FROM cleaned.Orders o
LEFT JOIN cleaned.SalesTeam st
    ON st.SalesTeamID = o.SalesTeamID
GROUP BY  st.SalesTeamID, st.SalesTeamName
ORDER BY TotalProfit DESC;




-- ===============================================================
-- Find the top 3 Regions who have generated the highest Profit
-- ===============================================================
SELECT TOP 3
    sl.Region,
    ROUND(SUM(o.Profit),2) AS TotalProfit
FROM cleaned.Orders o
LEFT JOIN cleaned.StoreLocation sl
    ON sl.StoreID = o.StoreID
GROUP BY  sl.Region
ORDER BY TotalProfit DESC;




-- ===============================================================
-- Analyse sales performance over time
-- ===============================================================
SELECT
    YEAR(OrderDate) AS OrderYear,
    MONTH(OrderDate) AS OrderMonth,
    ROUND(SUM(Profit),0) AS TotalProfit,
    ROUND(SUM(Sales),0) AS TotalSales,
    SUM(OrderQuantity) AS TotalQuantity,
    COUNT(DISTINCT CustomerID) AS TotalCustomers
FROM cleaned.Orders
WHERE OrderDate IS NOT NULL
GROUP BY YEAR(OrderDate),  MONTH(OrderDate) 
ORDER BY YEAR(OrderDate),  MONTH(OrderDate);




-- ================================================================
-- Calculate the total sales per month and 
-- the running total of sales over time 
-- ================================================================
SELECT
	OrderDate,
    TotalProfit,
    SUM(TotalProfit) OVER (ORDER BY OrderDate) AS RunningTotalProfit,
	TotalSales,
	SUM(TotalSales) OVER (ORDER BY OrderDate) AS RunningTotalSales,
	ROUND(AVG(AvgUnitPrice) OVER (ORDER BY orderDate),0) AS MovingAveragePrice
FROM
(
    SELECT 
        YEAR(OrderDate) AS OrderDate,
        ROUND(SUM(Profit),0) AS TotalProfit,
        ROUND(SUM(Sales),0) AS TotalSales,
        ROUND(AVG(UnitPrice),0) AS AvgUnitPrice
    FROM cleaned.Orders
    WHERE OrderDate IS NOT NULL
    GROUP BY YEAR(OrderDate)
) t;



-- =============================================================================
-- Analyze the yearly performance of products by comparing their Profit to both
-- the average Profit performance of the product and the previous year's Profit 
-- =============================================================================
WITH YearlyProductProfit AS (
    SELECT
        YEAR(o.OrderDate) AS OrderYear,
        p.ProductName,
        ROUND(SUM(o.Profit),0) AS CurrentProfit
    FROM cleaned.Orders o
    LEFT JOIN cleaned.Products p
        ON o.ProductID = p.ProductID
    WHERE o.OrderDate IS NOT NULL
    GROUP BY 
        YEAR(o.OrderDate), p.ProductName
)
SELECT
    OrderYear,
    ProductName,
    currentProfit,
    ROUND(AVG(currentProfit) OVER (PARTITION BY ProductName),0) AS AvgProfit,
    ROUND(currentProfit - AVG(currentProfit) OVER (PARTITION BY ProductName), 0) AS DiffAvg,
    CASE 
        WHEN currentProfit - AVG(currentProfit) OVER (PARTITION BY ProductName) > 0 THEN 'Above Avg'
        WHEN currentProfit - AVG(currentProfit) OVER (PARTITION BY ProductName) < 0 THEN 'Below Avg'
        ELSE 'Avg'
    END AS AvgChange,
    -- Year-over-Year Analysis
    LAG(currentProfit) OVER (PARTITION BY ProductName ORDER BY OrderYear) AS PYSales,
    currentProfit - LAG(currentProfit) OVER (PARTITION BY ProductName ORDER BY OrderYear) AS DiffPY,
    CASE 
        WHEN currentProfit - LAG(currentProfit) OVER (PARTITION BY ProductName ORDER BY OrderYear) > 0 THEN 'Increase'
        WHEN currentProfit - LAG(currentProfit) OVER (PARTITION BY ProductName ORDER BY OrderYear) < 0 THEN 'Decrease'
        ELSE 'No Change'
    END AS PYChange
FROM YearlyProductProfit
ORDER BY ProductName, OrderYear;



-- =============================================================================
-- Which Product contribute the most to overall Profit? 
-- =============================================================================
WITH categoryProfit AS (
    SELECT
        p.ProductName,
        SUM(o.Profit) AS TotalProfit
    FROM cleaned.Orders o
    LEFT JOIN cleaned.Products p
        ON p.ProductID = o.ProductID
    GROUP BY p.ProductName
)
SELECT
    ProductName,
    TotalProfit,
    SUM(TotalProfit) OVER () AS OveralProfit,
    ROUND(TotalProfit / SUM(TotalProfit) OVER () * 100, 2) AS PercentageOfOverallProfit
FROM categoryProfit
ORDER BY TotalProfit DESC;

